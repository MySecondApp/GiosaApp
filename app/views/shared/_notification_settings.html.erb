<div class="fixed bottom-4 left-4 z-40">
  <button id="notification-settings-toggle" class="<%= theme_classes('bg-gray-100 hover:bg-gray-200 text-gray-700', 'bg-gray-600 hover:bg-gray-500 text-gray-300') %> w-12 h-12 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center" title="Configurar notificaciones">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-3.403-3.403a1.5 1.5 0 010-2.122L19 9h-5m-6 8H3l3.403-3.403a1.5 1.5 0 000-2.122L3 9h5m7 4v1a3 3 0 11-6 0v-1m6 0V9a3 3 0 10-6 0v4"></path>
    </svg>
  </button>

  <div id="notification-settings-panel" class="hidden <%= theme_classes('bg-white', 'bg-gray-800') %> shadow-xl rounded-lg p-4 mb-2 border <%= theme_classes('border-gray-200', 'border-gray-700') %> min-w-[250px]">
    <h3 class="font-semibold mb-3 <%= theme_classes('text-gray-900', 'text-white') %>">Configuración de Notificaciones</h3>
    
    <div class="space-y-3">
      <label class="flex items-center">
        <input type="checkbox" id="sound-notifications" class="mr-2" checked>
        <span class="text-sm <%= theme_classes('text-gray-700', 'text-gray-300') %>">Sonidos de notificación</span>
      </label>
      
      <div class="border-t <%= theme_classes('border-gray-200', 'border-gray-600') %> pt-3">
        <label class="block text-sm font-medium <%= theme_classes('text-gray-700', 'text-gray-300') %> mb-2">
          Posición de notificaciones
        </label>
        <select id="notification-position" class="w-full px-2 py-1 text-sm border rounded <%= theme_classes('border-gray-300 bg-white text-gray-900', 'border-gray-600 bg-gray-700 text-white') %>">
          <option value="top-right">Arriba derecha</option>
          <option value="top-left">Arriba izquierda</option>
          <option value="bottom-right">Abajo derecha</option>
          <option value="bottom-left">Abajo izquierda</option>
          <option value="top-center">Arriba centro</option>
          <option value="bottom-center">Abajo centro</option>
        </select>
      </div>

      <div class="border-t <%= theme_classes('border-gray-200', 'border-gray-600') %> pt-3">
        <button id="test-notification" class="w-full bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded text-sm transition-colors">
          Probar notificación
        </button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const toggle = document.getElementById('notification-settings-toggle');
  const panel = document.getElementById('notification-settings-panel');
  const soundCheckbox = document.getElementById('sound-notifications');
  const positionSelect = document.getElementById('notification-position');
  const testButton = document.getElementById('test-notification');

  // Toggle panel
  toggle.addEventListener('click', function() {
    panel.classList.toggle('hidden');
  });

  // Close panel when clicking outside
  document.addEventListener('click', function(event) {
    if (!toggle.contains(event.target) && !panel.contains(event.target)) {
      panel.classList.add('hidden');
    }
  });

  // Save sound preference
  soundCheckbox.addEventListener('change', function() {
    if (this.checked) {
      localStorage.removeItem('notifications-sound-disabled');
    } else {
      localStorage.setItem('notifications-sound-disabled', 'true');
    }
  });

  // Load sound preference
  if (localStorage.getItem('notifications-sound-disabled')) {
    soundCheckbox.checked = false;
  }

  // Save position preference and update controller
  positionSelect.addEventListener('change', function() {
    localStorage.setItem('notifications-position', this.value);
    
    // Update the notifications controller position
    const notificationsController = document.querySelector('[data-controller="notifications"]');
    if (notificationsController && window.Stimulus) {
      const controller = window.Stimulus.getControllerForElementAndIdentifier(notificationsController, 'notifications');
      if (controller) {
        controller.positionValue = this.value;
        // Recreate container with new position
        if (controller.hasContainerTarget) {
          controller.containerTarget.remove();
        }
        controller.createContainer();
      }
    }
  });

  // Load position preference
  const savedPosition = localStorage.getItem('notifications-position');
  if (savedPosition) {
    positionSelect.value = savedPosition;
  }

  // Test notification
  testButton.addEventListener('click', function() {
    const event = new CustomEvent("notification:show", {
      detail: {
        message: "Esta es una notificación de prueba para verificar que todo funciona correctamente.",
        type: "comment",
        title: "🧪 Notificación de prueba",
        duration: 5000
      }
    });
    window.dispatchEvent(event);
    
    panel.classList.add('hidden');
  });
});
</script>
